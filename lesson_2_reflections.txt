What happens when you initialize a repository? Why do you need to do it?
    Initializing a repository means that you have stored metadata
    about the history of the repository in the hidden directory .git. Innitializing 
    is important to track the history of the files in the repository  

How is the staging area different from the working directory and the repository?
What value do you think it offers?
     The staging area is an intermediate step between the working directory 
     and the empty repository. It offers the programmer to select the file(s) and 
     thereby the exact changes that the programmer wants to be commited 
     to the repository.

How can you use the staging area to make sure you have one commit per logical
change?
    The staging area can be used to check if a change has been made 
    to the working directory using the git diff comand and also to be used to 
    check if a change has been commited are not (i.e. is the change in the 
    staging area or has it been commited.) 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
    When you want to experiment with your code and don't want to affect 
    your code, then a new branch can offer you the security that your work 
    will not be compromised. Regardless of the changes you make in the
    branched code, they will not affect you master code.

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?